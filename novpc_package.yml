AWSTemplateFormatVersion: 2010-09-09
Description: Severless set up with an RDS
Globals:
  Function:
    Environment:
      Variables:
        MY_SQL_URI:
          Fn::Join:
          - ''
          - - Ref: dbUserName
            - ':'
            - Ref: dbUserPassword
            - '@('
            - Fn::GetAtt:
              - DatabaseCluster
              - Endpoint.Address
            - ':'
            - Fn::GetAtt:
              - DatabaseCluster
              - Endpoint.Port
            - )/mydb
    Runtime: go1.x
    Tags:
      demo: true
    Timeout: 10
    Tracing: Active
Outputs:
  URL:
    Description: URL for HTTPS Endpoint
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: ServerlessRestApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/
        - Ref: ServerlessRestApiProdStage
Parameters:
  DbSize:
    Default: db.t2.small
    Type: String
  dbUserName:
    NoEcho: true
    Type: String
  dbUserPassword:
    NoEcho: true
    Type: String
Resources:
  DatabaseCluster:
    Properties:
      DBSubnetGroupName:
        Ref: PublicDatabaseSubnetGroup
      Engine: aurora
      MasterUserPassword:
        Ref: dbUserPassword
      MasterUsername:
        Ref: dbUserName
    Type: AWS::RDS::DBCluster
  DatabasePrimaryInstance:
    Properties:
      DBClusterIdentifier:
        Ref: DatabaseCluster
      DBInstanceClass:
        Ref: DbSize
      DBSubnetGroupName:
        Ref: PublicDatabaseSubnetGroup
      Engine: aurora
      PubliclyAccessible: true
    Type: AWS::RDS::DBInstance
  PermissonForEventsToInvokeReadLambda:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - Read
        - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - Trigger
        - Arn
    Type: AWS::Lambda::Permission
  PermissonForEventsToInvokeWriteLambda:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - Write
        - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - Trigger
        - Arn
    Type: AWS::Lambda::Permission
  PublicDatabaseSubnetGroup:
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        Fn::Split:
        - ','
        - Fn::ImportValue: LambdaVPCExperiementPublicSubnets
    Type: AWS::RDS::DBSubnetGroup
  Read:
    Properties:
      CodeUri: s3://lambda-code-azn/0c50c12ba15e7389eeace53033aa9a17
      Events:
        GetEvent:
          Properties:
            Method: get
            Path: /read
          Type: Api
      Handler: dist/handler/read
      Policies:
      - AWSXrayWriteOnlyAccess
    Type: AWS::Serverless::Function
  Trigger:
    Properties:
      Description: Triggers cold starts
      ScheduleExpression: rate(1 hour)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - Write
          - Arn
        Id: WriteTrigger
      - Arn:
          Fn::GetAtt:
          - Read
          - Arn
        Id: ReadTrigger
    Type: AWS::Events::Rule
  Write:
    Properties:
      CodeUri: s3://lambda-code-azn/0c50c12ba15e7389eeace53033aa9a17
      Events:
        GetEvent:
          Properties:
            Method: get
            Path: /write
          Type: Api
      Handler: dist/handler/write
      Policies:
      - AWSXrayWriteOnlyAccess
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
